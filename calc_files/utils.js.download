//Array.prototype.find() Pollyfill
if (!Array.prototype.find) {
	Object.defineProperty(Array.prototype, 'find', {
		value: function (predicate) {
			// 1. Let O be ? ToObject(this value).
			if (this == null) {
				throw new TypeError('"this" is null or not defined');
			}

			var o = Object(this);

			// 2. Let len be ? ToLength(? Get(O, "length")).
			var len = o.length >>> 0;

			// 3. If IsCallable(predicate) is false, throw a TypeError exception.
			if (typeof predicate !== 'function') {
				throw new TypeError('predicate must be a function');
			}

			// 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
			var thisArg = arguments[1];

			// 5. Let k be 0.
			var k = 0;

			// 6. Repeat, while k < len
			while (k < len) {
				// a. Let Pk be ! ToString(k).
				// b. Let kValue be ? Get(O, Pk).
				// c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
				// d. If testResult is true, return kValue.
				var kValue = o[k];
				if (predicate.call(thisArg, kValue, k, o)) {
					return kValue;
				}
				// e. Increase k by 1.
				k++;
			}

			// 7. Return undefined.
			return undefined;
		}
	});
}
//Array.prototype.filter() Pollyfill
if (!Array.prototype.filter) {
	Array.prototype.filter = function (func, thisArg) {
		'use strict';
		if (!((typeof func === 'Function' || typeof func === 'function') && this))
			throw new TypeError();
		var len = this.length >>> 0,
			res = new Array(len), // preallocate array
			t = this, c = 0, i = -1;
		if (thisArg === undefined) {
			while (++i !== len) {
				// checks to see if the key was set
				if (i in this) {
					if (func(t[i], i, t)) {
						res[c++] = t[i];
					}
				}
			}
		}
		else {
			while (++i !== len) {
				// checks to see if the key was set
				if (i in this) {
					if (func.call(thisArg, t[i], i, t)) {
						res[c++] = t[i];
					}
				}
			}
		}
		res.length = c; // shrink down array to proper size
		return res;
	};
}
//Array.prototype.forEach() Pollyfill
// Production steps of ECMA-262, Edition 5, 15.4.4.18
// Reference: http://es5.github.io/#x15.4.4.18
if (!Array.prototype.forEach) {
	Array.prototype.forEach = function (callback/*, thisArg*/) {
		var T, k;
		if (this == null) {
			throw new TypeError('this is null or not defined');
		}
		// 1. Let O be the result of calling toObject() passing the
		// |this| value as the argument.
		var O = Object(this);
		// 2. Let lenValue be the result of calling the Get() internal
		// method of O with the argument "length".
		// 3. Let len be toUint32(lenValue).
		var len = O.length >>> 0;
		// 4. If isCallable(callback) is false, throw a TypeError exception. 
		// See: http://es5.github.com/#x9.11
		if (typeof callback !== 'function') {
			throw new TypeError(callback + ' is not a function');
		}
		// 5. If thisArg was supplied, let T be thisArg; else let
		// T be undefined.
		if (arguments.length > 1) {
			T = arguments[1];
		}
		// 6. Let k be 0.
		k = 0;
		// 7. Repeat while k < len.
		while (k < len) {
			var kValue;
			// a. Let Pk be ToString(k).
			//    This is implicit for LHS operands of the in operator.
			// b. Let kPresent be the result of calling the HasProperty
			//    internal method of O with argument Pk.
			//    This step can be combined with c.
			// c. If kPresent is true, then
			if (k in O) {
				// i. Let kValue be the result of calling the Get internal
				// method of O with argument Pk.
				kValue = O[k];
				// ii. Call the Call internal method of callback with T as
				// the this value and argument list containing kValue, k, and O.
				callback.call(T, kValue, k, O);
			}
			// d. Increase k by 1.
			k++;
		}
		// 8. return undefined.
	};
}

//Utility Functions
function Utils() {
	this.apiPath = function (domain) {
		if (!domain) {
			domain = "firstmac";
		}
		var locationPrefix = location.hostname.split('.')[0]
		switch (locationPrefix) {
			case 'localhost':
			case 'dev-www':
			case 'test-www':
			case 'dev-firstmac':
			case 'test-firstmac':
				return 'https://test-api.' + domain + '.com.au';
			case 'stage-www':
			case 'stage-firstmac':
				return 'https://api.' + domain + '.com.au';
			default:
				return 'https://api.' + domain + '.com.au';
		}
	}
	this.apiPathLegacy = function (domain) {
		if (!domain) {
			domain = "firstmac";
		}
		var locationPrefix = location.hostname.split('.')[0]
		switch (locationPrefix) {
			case 'localhost':
			case 'dev-www':
			case 'dev-firstmac':
				return 'https://dev-www.' + domain + '.com.au';
			case 'test-www':
			case 'test-firstmac':
				return 'https://test-www.' + domain + '.com.au';
			case 'stage-www':
			case 'stage-firstmac':
				return 'https://stage-www.' + domain + '.com.au';
			default:
				return 'https://www.' + domain + '.com.au';
		}
	}
	this.splitCustomerName = function (fullName) {
		var SplitName = fullName.split(" ");
		var FirstName = "";
		var MiddleName = "";
		var LastName = "";

		FirstName = SplitName[0].trim();

		if (SplitName.length == 2) {
			LastName = SplitName[SplitName.length - 1].trim();
		}
		else if (SplitName.length > 2) {
			var middleName = "";
			for (var i = 1; i < (SplitName.length - 1); i++) {
				middleName += SplitName[i] + " ";
			}
			MiddleName = middleName.trim();
			LastName = SplitName[SplitName.length - 1].trim();
		}

		return {
			"FirstName": FirstName,
			"MiddleName": MiddleName,
			"LastName": LastName,
		}
	}
	this.getURLParameter = function (name) {
		name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
		var regexS = "[\\?&]" + name + "=([^&#]*)";
		var regex = new RegExp(regexS);
		var results = regex.exec(window.location.href);
		if (results == null) {
			return "";
		} else {
			return results[1];
		}
	}
	this.stripOutCommas = function (value) {
		try {
			return value.replace(new RegExp(/,/g), "");
		} catch (e) {
			return value;
		}
	}
	this.clientData = {
		"SessionID": null,
		"SessionHostServer": null,
		"SessionReferrerUrl": null,
		"ClientIPAddress": null,
		"ClientUserAgent": navigator.userAgent,
		"ClientCookiesEnabled": navigator.cookieEnabled,
	}
	this.geoTargetCityList = [
		"Acacia Ridge",
		"Adare",
		"Advancetown",
		"Aeroglen",
		"Airlie Beach",
		"Aitkenvale",
		"Albany Creek",
		"Albion",
		"Alderley",
		"Alexandra",
		"Alexandra Headland",
		"Alexandra Hills",
		"Algester",
		"Alice River",
		"Allan",
		"Allandale",
		"Allenstown",
		"Allora",
		"Alpha",
		"Andergrove",
		"Annerley",
		"Anstead",
		"Arana Hills",
		"Archer",
		"Archerfield",
		"Armstrong Creek",
		"Aroona",
		"Arundel",
		"Ascot",
		"Ashgrove",
		"Ashmore",
		"Ashwell",
		"Aspley",
		"Atherton",
		"Athol",
		"Auchenflower",
		"Augustine Heights",
		"Austinville",
		"Avondale",
		"Ayr",
		"Babinda",
		"Badu",
		"Bahrs Scrub",
		"Bajool",
		"Bald Hills",
		"Balgal Beach",
		"Bangalee",
		"Banksia Beach",
		"Banyo",
		"Bardon",
		"Baree",
		"Bargara",
		"Basin Pocket",
		"Bayview Heights",
		"Beach Holm",
		"Beachmere",
		"Beaudesert",
		"Beechmont",
		"Beenleigh",
		"Beerburrum",
		"Beerwah",
		"Belgian Gardens",
		"Belivah",
		"Bellara",
		"Bellbowrie",
		"Belli Park",
		"Bellmere",
		"Bells Creek",
		"Belmont",
		"Belvedere",
		"Benowa",
		"Berrinba",
		"Berserker",
		"Bethania Junction",
		"Bidwill",
		"Biggera Waters",
		"Bilinga",
		"Biloela",
		"Birkdale",
		"Birnam",
		"Birtinya",
		"Black Mountain",
		"Blackbutt",
		"Blacks Beach",
		"Blackstone",
		"Blackwater",
		"Blanchview",
		"Blenheim",
		"Bli Bli",
		"Bloomfield",
		"Bloomsbury",
		"Blue Mountain Heights",
		"Bluewater",
		"Bohle Plains",
		"Bokarina",
		"Bongaree",
		"Bonogin",
		"Bony Mountain",
		"Boonah",
		"Boondall",
		"Booral",
		"Booroobin",
		"Booval",
		"Bouldercombe",
		"Bowen",
		"Bowen Hills",
		"Boyne Island",
		"Bracalba",
		"Bracken Ridge",
		"Brandon",
		"Branyan",
		"Brassall",
		"Bray Park",
		"Brendale",
		"Brighton",
		"Brightview",
		"Brinsmead",
		"Brisbane",
		"Broadbeach",
		"Brookfield",
		"Brookwater",
		"Browns Plains",
		"Bucasia",
		"Buddina",
		"Buderim",
		"Bulimba",
		"Bundaberg",
		"Bundall",
		"Bundamba",
		"Bundoora Victoria",
		"Bungalow",
		"Bunya",
		"Burbank",
		"Burdell",
		"Burleigh Heads",
		"Burnett Heads",
		"Burpengary",
		"Burrum",
		"Burrum Heads",
		"Bushland Beach",
		"Butchers Creek",
		"Cabarlah",
		"Caboolture",
		"Cairns",
		"Calamvale",
		"Calliope",
		"Caloundra",
		"Cambooya",
		"Cambroon",
		"Camira",
		"Camp Hill",
		"Camp Mountain",
		"Cannon Hill",
		"Cannon Valley",
		"Cannonvale",
		"Canungra",
		"Capalaba",
		"Caravonica",
		"Carbrook",
		"Carindale",
		"Carole Park",
		"Carrara",
		"Carseldine",
		"Carters Ridge",
		"Cashmere",
		"Castaways Beach",
		"Cawdor",
		"Cedar Creek",
		"Cedar Grove",
		"Cedar Vale",
		"Centenary Heights",
		"Chambers Flat",
		"Chandler",
		"Chapel Hill",
		"Charleville",
		"Charters Towers",
		"Chelmer",
		"Chermside",
		"Chermside West",
		"Cherry Creek",
		"Chevallum",
		"Childers",
		"Chuwar",
		"Clagiraba",
		"Clayfield",
		"Clear Island Waters",
		"Clear Mountain",
		"Cleveland",
		"Clifton",
		"Clinton",
		"Cloncurry",
		"Clontarf",
		"Clontarf",
		"Closeburn",
		"Comet",
		"Conondale",
		"Coochiemudlo Island",
		"Coolana",
		"Coolangatta",
		"Cooloola Cove",
		"Coolum Beach",
		"Coombabah",
		"Coomera",
		"Coominya",
		"Coopers Plains",
		"Cooroibah",
		"Cooroy Mountain",
		"Coorparoo",
		"Corinda",
		"Cornubia",
		"Cotswold",
		"Cotton Tree",
		"Cranley",
		"Crestmead",
		"Croftby",
		"Crohamhurst",
		"Crows Nest",
		"Cungulla",
		"Currajong",
		"Currimundi",
		"Currumbin",
		"D'Aguilar",
		"Daisy Hill",
		"Dakabin",
		"Dalby",
		"Darra",
		"Dayboro",
		"Deagon",
		"Deception Bay",
		"Deeragun",
		"Delaneys Creek",
		"Depot Hill",
		"Derrymore",
		"Diamond Valley",
		"Diddillibah",
		"Dingo",
		"Dinmore",
		"Donnybrook",
		"Doolandella",
		"Doonan",
		"Draper",
		"Drewvale",
		"Dunwich",
		"Durack",
		"Eagle Farm",
		"Eagle Heights",
		"Eagleby",
		"Earlville",
		"Eastern Heights",
		"Eatons Hill",
		"Ebbw Vale",
		"Ebenezer",
		"Edens Landing",
		"Edge Hill",
		"Edmonton",
		"Eight Mile Plains",
		"Elanora",
		"Elimbah",
		"Emerald",
		"Emu Park",
		"Enoggera",
		"Esk",
		"Etna Creek",
		"Eumundi",
		"Eungella",
		"Euramo",
		"Fairfield",
		"Fernvale",
		"Ferny Hills",
		"Fig Tree Pocket",
		"Fitzgibbon",
		"Flagstone Creek",
		"Flaxton",
		"Fletcher",
		"Flinders",
		"Forest Hill",
		"Forestdale",
		"Fortitude Valley",
		"Freestone",
		"Frenchville",
		"Freshwater",
		"Gailes",
		"Garbutt",
		"Gatton",
		"Gaven",
		"Gayndah",
		"Gaythorne",
		"Geebung",
		"Gilberton",
		"Gilston",
		"Gin Gin",
		"Gladstone",
		"Glass House Mountains",
		"Glen Aplin",
		"Glenden",
		"Gleneagle",
		"Glenore Grove",
		"Glenview",
		"Godwin Beach",
		"Gold Coast",
		"Golden Beach",
		"Goodna",
		"Goombungee",
		"Goomburra",
		"Goomeri",
		"Goondiwindi",
		"Gordonvale",
		"Gowrie Junction",
		"Gracemere",
		"Graceville",
		"Greenbank",
		"Greenmount",
		"Greenslopes",
		"Griffin",
		"Guanaba",
		"Gulliver",
		"Gumdale",
		"Gumlow",
		"Gunalda",
		"Gympie",
		"Hamilton",
		"Hamilton Island",
		"Harlaxton",
		"Harristown",
		"Harrisville",
		"Hawthorne",
		"Hayman Island",
		"Heathwood",
		"Heatley",
		"Helensvale",
		"Helidon",
		"Hemmant",
		"Hendra",
		"Herberton",
		"Heritage Park",
		"Hermit Park",
		"Herston",
		"Hervey Bay",
		"Highfields",
		"Highgate Hill",
		"Highland Park",
		"Highvale",
		"Holland Park West",
		"Hollywell",
		"Holmview",
		"Home Hill",
		"Hope Island",
		"Hutton",
		"Hyde Park",
		"Idalia",
		"Ilkley",
		"Inala",
		"Indooroopilly",
		"Ingham",
		"Inglewood",
		"Innisfail",
		"Ipswich",
		"Jacobs Well",
		"Jamboree Heights",
		"Jandowae",
		"Jimboomba",
		"Joyner",
		"Jubilee Pocket",
		"Julia Creek",
		"Kalinga",
		"Kallangur",
		"Kandanga",
		"Kangaroo Point",
		"Kanimbla",
		"Karalee",
		"Karana Downs",
		"Kawungan",
		"Kearneys Spring",
		"Kedron",
		"Kelvin Grove",
		"Kenilworth",
		"Keperra",
		"Kepnock",
		"Kewarra Beach",
		"Kilcoy",
		"Kilkivan",
		"Killarney",
		"Kin Kin",
		"Kingaroy",
		"Kings Beach",
		"Kingsthorpe",
		"Kingston",
		"Kippa-Ring",
		"Kobble",
		"Kooralbyn",
		"Kuluin",
		"Kumbia",
		"Kunda Park",
		"Kuraby",
		"Kuranda",
		"Kureelpa",
		"Labrador",
		"Laidley",
		"Lake Clarendon",
		"Lake Eacham",
		"Lake Macdonald",
		"Lamington",
		"Landers Shoot",
		"Landsborough",
		"Larapinta",
		"Lawnton",
		"Little Mountain",
		"Lockrose",
		"Logan Village",
		"Loganholme",
		"Loganlea",
		"Longreach",
		"Lota",
		"Lowood",
		"Luscombe",
		"Lutwyche",
		"Lytton",
		"Macgregor",
		"Machans Beach",
		"Mackay",
		"Mackenzie",
		"Maclean",
		"Macleay Island",
		"Main Beach",
		"Malanda",
		"Maleny",
		"Mango Hill",
		"Manly",
		"Mansfield",
		"Manunda",
		"Mapleton",
		"Marburg",
		"Marcoola",
		"Mareeba",
		"Margate",
		"Marian",
		"Maroochy River",
		"Maroochydore",
		"Maroondan",
		"Marsden",
		"Maryborough",
		"Maudsland",
		"McDowall",
		"Meadowbrook",
		"Meridian Plains",
		"Meringandan",
		"Mermaid Beach",
		"Mermaid Waters",
		"Merrimac",
		"Miami",
		"Middle Park",
		"Middle Ridge",
		"Miles",
		"Millaa Millaa",
		"Millmerran",
		"Milton",
		"Minyama",
		"Mirani",
		"Miriam Vale",
		"Mission Beach",
		"Mitchell",
		"Mitchelton",
		"Moffat Beach",
		"Moffatdale",
		"Moggill",
		"Molendinar",
		"Mons",
		"Monto",
		"Montville",
		"Mooloolabah",
		"Mooloolah Valley",
		"Moore",
		"Moore Park",
		"Mooroobool",
		"Moorooka",
		"Moranbah",
		"Morayfield",
		"Morningside",
		"Mossman",
		"Mount Colliery",
		"Mount Cotton",
		"Mount Glorious",
		"Mount Gravatt",
		"Mount Isa",
		"Mount Louisa",
		"Mount Low",
		"Mount Morgan",
		"Mount Nathan",
		"Mount Nebo",
		"Mount Ommaney",
		"Mount Samson",
		"Mount Sheridan",
		"Mountain Creek",
		"Mourilyan",
		"Mt Coolum",
		"Mt Crosby",
		"Mudjimba",
		"Mulambin",
		"Mundingburra",
		"Mundoolun",
		"Mundubbera",
		"Munruben",
		"Murarrie",
		"Murgon",
		"Murrumba",
		"Nambour",
		"Nanango",
		"Narangba",
		"Nathan",
		"Nelly Bay",
		"Nerang",
		"New Auckland",
		"New Beith",
		"New Farm",
		"Newmarket",
		"Newport",
		"Newstead",
		"Nindaroo",
		"Ningi",
		"Nobby",
		"Nome",
		"Noosa",
		"Noosaville",
		"Norman Gardens",
		"Norman Park",
		"Normanton",
		"North Booval",
		"North Lakes",
		"North Ward",
		"Northgate",
		"Norville",
		"Nudgee",
		"Nudgee Beach",
		"Nundah",
		"Oakey",
		"Oakhurst",
		"Oonoonba",
		"Ooralea",
		"Ormeau",
		"Ormiston",
		"Oxenford",
		"Oxley",
		"Pacific Haven",
		"Pacific Heights",
		"Pacific Pines",
		"Paddington",
		"Paget",
		"Pallarenda",
		"Palm Beach",
		"Palm Cove",
		"Palmview",
		"Palmwoods",
		"Park Ridge",
		"Parkinson",
		"Parkwood",
		"Parrearra",
		"Patrick Estate",
		"Peachester",
		"Peak Crossing",
		"Pelican",
		"Peregian Beach",
		"Peregian Springs",
		"Petrie",
		"Pialba",
		"Pimpama",
		"Pine Mountain",
		"Pinkenba",
		"Pioneer",
		"Placid Hills",
		"Plainland",
		"Point Arkwright",
		"Point Lookout",
		"Pomona",
		"Port Douglas",
		"Portsmith",
		"Prenzlau",
		"Priestdale Lagoons",
		"Proserpine",
		"Pullen Vale",
		"Raceview",
		"Railway Estate",
		"Rainbow Beach",
		"Ramsay",
		"Rangeville",
		"Rasmussen",
		"Ravenshoe",
		"Red Hill",
		"Redbank",
		"Redcliffe",
		"Redland Bay",
		"Redlynch",
		"Redridge",
		"Reedy Creek",
		"Reesville",
		"Regency Downs",
		"Ringtail Creek",
		"Ripley",
		"River Heads",
		"Riverhills",
		"Riverview",
		"Roadvale",
		"Robertson",
		"Robina",
		"Rochedale",
		"Rockhampton",
		"Rocklea",
		"Rocksberg",
		"Rockville",
		"Rollingstone",
		"Rosedale",
		"Rosewood",
		"Rossleigh",
		"Rothwell",
		"Runaway Bay",
		"Runcorn",
		"Rural View",
		"Saint George",
		"Saint Lucia",
		"Salisbury",
		"Samford",
		"Sanctuary Cove",
		"Sandgate",
		"Sandstone Point",
		"Sarina",
		"Scarborough",
		"Scarness",
		"Seventeen Mile Rocks",
		"Sexton",
		"Shailer Park",
		"Sheldon",
		"Shoal Point",
		"Shorncliffe",
		"Silkstone",
		"Sinnamon Park",
		"Sippy Downs",
		"Slacks Creek",
		"Southbrook",
		"Southport",
		"Southside",
		"Spring Hill",
		"Spring Mountain",
		"Springbrook",
		"Springfield",
		"Springfield",
		"Springfield Central",
		"Springwood",
		"Stafford",
		"Stafford Heights",
		"Stanmore",
		"Stanthorpe",
		"Stapylton",
		"Stockleigh",
		"Strathpine",
		"Stretton",
		"Sumner",
		"Sunnybank",
		"Sunshine Beach",
		"Surfers Paradise",
		"Swanbank",
		"Taigum",
		"Tallai",
		"Tallebudgera",
		"Tamborine Mountain",
		"Tanah Merah",
		"Tanawha",
		"Tandur",
		"Tannum Sands",
		"Tansey",
		"Tara",
		"Tarampa Flat",
		"Taringa",
		"Tarragindi",
		"Taylors Beach",
		"Teneriffe",
		"Tennyson",
		"Tewantin",
		"Thagoona",
		"Thangool",
		"The Gap",
		"The Palms",
		"The Summit",
		"Thorneside",
		"Thornlands",
		"Thuringowa",
		"Thursday Island",
		"Tieri",
		"Tin Can Bay",
		"Tinana",
		"Tinbeerwah",
		"Tingalpa",
		"Tivoli",
		"Tolga",
		"Toogoolawah",
		"Toogoom",
		"Toombul",
		"Toorbul",
		"Toowong",
		"Toowoomba",
		"Torquay",
		"Townsville",
		"Trinity Beach",
		"Tugun",
		"Tully",
		"Twin Waters",
		"Underwood",
		"Upper Brookfield",
		"Upper Caboollure",
		"Upper Coomera",
		"Upper Kedron",
		"Upper Mudgeeraba",
		"Urangan",
		"Valdora",
		"Varsity Lakes",
		"Victoria Point",
		"Virginia",
		"Wacol",
		"Wakerley",
		"Walloon",
		"Wamuran",
		"Wandal",
		"Wangan",
		"Warana",
		"Warner",
		"Warren",
		"Warwick",
		"Waterford",
		"Wavell Heights",
		"Wellington Point",
		"West Burleigh",
		"West End",
		"Westbrook",
		"Westlake",
		"White Patch",
		"White Rock",
		"Wights Mountain",
		"Willawong",
		"Wilsonton",
		"Wilston",
		"Windaroo",
		"Windsor",
		"Wishart",
		"Withcott",
		"Witta",
		"Wondai",
		"Wongawallan",
		"Woodford",
		"Woodridge",
		"Woody Point",
		"Woolgar",
		"Woolloongabba",
		"Woolooga",
		"Wooloowin",
		"Woombye",
		"Woorim",
		"Woree",
		"Worongary",
		"Wulkuraka",
		"Wurtulla",
		"Wynnum",
		"Wynnum North",
		"Wyreema",
		"Yaamba",
		"Yamanto",
		"Yandina",
		"Yangan",
		"Yarrabah",
		"Yarrabilba",
		"Yatala",
		"Yeerongpilly",
		"Yengarie",
		"Yeppoon",
		"Yeronga",
		"Yorkeys Knob",
		"Yungaburra",
		"Zillmere",
		"Zilzie"
	];
}

//Cookie Manipulation Functions
function Cookies() {
	this.setCookie = function (cname, cvalue, exdays) {
		var d = new Date();
		d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
		var expires = "expires=" + d.toUTCString();
		document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
	}
	this.getCookie = function (cname) {
		var name = cname + "=";
		var ca = document.cookie.split(';');
		for (var i = 0; i < ca.length; i++) {
			var c = ca[i];
			while (c.charAt(0) == ' ') {
				c = c.substring(1);
			}
			if (c.indexOf(name) == 0) {
				return c.substring(name.length, c.length);
			}
		}
		return "";
	}
	this.removeCookie = function (cname) {
		var d = new Date();
		d.setTime(d.getTime() - 1);
		var expires = "expires=" + d.toUTCString();
		document.cookie = cname + "=;" + expires + ";path=/";
	}
}

//Visitor API Functions
function Visitor() {
	//this.authToken = null;
	var authToken = null;
	this.setValue = function (fieldName, fieldValue, callback) {
		if (!fieldValue && fieldValue !== false) { return; }
		var visitorData = {};
		visitorData[fieldName] = fieldValue;
		jQuery.ajax({
			type: 'PUT',
			url: utils.apiPath() + "/visitor/bag/value",
			contentType: 'application/json',
			dataType: "json",
			data: JSON.stringify(visitorData),
			xhrFields: {
				withCredentials: false
			},
			headers: {
				"Authorization": "Bearer " + this.authToken
			},
			success: function (response) {
				callback(response);
			},
			error: function (response) {
				console.error(response);
			}
		});

	}
	this.setValues = function (visitorData, callback) {
		if (!visitorData && visitorData !== false) { return; }
		for (var property in visitorData) {
			if (visitorData.hasOwnProperty(property) && (visitorData[property] === "" || visitorData[property] === undefined)) {
				delete visitorData[property];
			}
		}
		jQuery.ajax({
			type: 'PUT',
			url: utils.apiPath() + "/visitor/bag/value",
			contentType: 'application/json',
			dataType: "json",
			data: JSON.stringify(visitorData),
			xhrFields: {
				withCredentials: false
			},
			headers: {
				"Authorization": "Bearer " + authToken
			},
			success: function (response) {
				callback(response);
			},
			error: function (response) {
				console.error(response);
			}
		});

	}
	this.getValue = function (fieldNames, callback) {
		jQuery.ajax({
			type: 'GET',
			url: utils.apiPath() + "/visitor/bag/value?fields=" + fieldNames + "&t=" + new Date().getTime(),
			contentType: 'application/json',
			dataType: "json",
			xhrFields: {
				withCredentials: false
			},
			headers: {
				"Authorization": "Bearer " + authToken
			},
			success: function (response) {
				callback(response);
			},
			error: function (response) {
				console.error(response);
				callback(response);
			}
		});
	}
	// Does the token exist in the sessionStorage
	authToken = sessionStorage.hasOwnProperty('visitor-api-token') ? sessionStorage.getItem('visitor-api-token') : null;
	// Does the token exist in a browser cookie
	authToken = cookies.getCookie('visitor-api-token') ? cookies.getCookie('visitor-api-token') : null;
	// No token in session or browser cookie create one using the cookie, "dmid".
	if (authToken == null || authToken == "") {
		jQuery.ajax({
			type: 'POST',
			url: utils.apiPath() + "/visitor/bag/" + cookies.getCookie("dmid"),
			contentType: 'application/json',
			dataType: "json",
			xhrFields: {
				withCredentials: false
			},
			headers: {},
			success: function (response) {
				if (response.token) {
					sessionStorage.setItem("visitor-api-token", response.token);
					cookies.setCookie("visitor-api-token", response.token, 28);
					authToken = response.token;
				}
			},
			error: function (response) { console.error(response); }
		});
	}
	if (sessionStorage.getItem("visitor-api-mappings") == null || sessionStorage.getItem("visitor-api-mappings") == "") {
		jQuery.ajax({
			type: 'GET',
			url: utils.apiPath() + "/types/list/visitor-mappings",
			contentType: 'application/json',
			dataType: "json",
			xhrFields: {
				withCredentials: false
			},
			headers: {},
			success: function (response) {
				if (response) {
					sessionStorage.setItem("visitor-api-mappings", JSON.stringify(response));
					this.apiMappings = response;
				}
			},
			error: function (response) { console.error(response); }
		});
	} else {
		this.apiMappings = JSON.parse(sessionStorage.getItem("visitor-api-mappings"));
	}
}

//HTTP Request Functions
function HTTPRequests() {
	this.get = function (requestUrl, headers, callback) {
		jQuery.ajax({
			type: 'GET',
			url: requestUrl,
			contentType: 'application/json',
			dataType: "json",
			xhrFields: {
				withCredentials: false
			},
			headers: headers,
			success: function (response) {
				callback(response);
			},
			error: function (response) {
				console.error(response);
				callback(response);
			}
		});
	},
	this.post = function (requestUrl, postData, headers, callback) {
		jQuery.ajax({
			type: 'POST',
			url: requestUrl,
			contentType: 'application/json',
			dataType: "json",
			data: postData,
			xhrFields: {
				withCredentials: false
			},
			headers: headers,
			success: function (response) {
				callback(response);
			},
			error: function (response) {
				console.error(response);
				callback(response);
			}
		});
	},
	this.put = function (requestUrl, postData, headers, callback) {
		jQuery.ajax({
			type: 'PUT',
			url: requestUrl,
			contentType: 'application/json',
			dataType: "json",
			data: postData,
			xhrFields: {
				withCredentials: false
			},
			headers: headers,
			success: function (response) {
				callback(response);
			},
			error: function (response) {
				console.error(response);
				callback(response);
			}
		});
	}
}

//Form Validation Functions
function Validation() {
	this.required = function (input) {
		return input ? true : false;
	},
	this.minLength = function (input, length) {
		return input.length >= length;
	},
	this.maxLength = function (input, length) {
		return input.length <= length;
	},
	this.minValue = function (input, value) {
		return input >= value;
	},
	this.maxValue = function (input, value) {
		return input <= value;
	},
	this.emailFormat = function (input) {
		var emailFormat = /^([_a-zA-Z0-9-]+)(\.[_a-zA-Z0-9-]+)*@([a-zA-Z0-9-]+\.)+([a-zA-Z]{2,9})$/;
		if (!emailFormat.test(input)) {
			return false;
		}
		return true;
	},
	this.emailValid = function (input, callback) {
		axios
			//.get(utils.apiPath("loans") + "/retailapi/TotalCheckApi/api/Validation/email?email_address=" + input)
			.get(utils.apiPathLegacy('loans') + "/retailapi/TotalCheckApi/api/Validation/email?email_address=" + input)
			.then(function(response) {
				if (response.data.result) {
					if (response.data.result.email_valid == "INVALID" || response.data.result.mailserver_exists == "INVALID") {
						callback(false)
					}
					else {
						callback(true)
					}
				}
			})
	},
	this.phoneFormat = function (input) {
		var result = {
			"isPossible": false,
			"isPossibleFailReason": "",
			"isValid": false,
			"exceptionError": "",
			"regionCode": "",
			"numberType": "",
			"format": {
				"countryCode": "",
				"areaCode": "",
				"localNumber": ""
			}
		};
		var phoneUtil = libphonenumber.PhoneNumberUtil.getInstance();
		try {
			var number = phoneUtil.parseAndKeepRawInput(input, "AU");
		} catch (e) {
			result.isValid = false;
			result.exceptionError = e;
			return result;
		}
	
		result.isPossible = phoneUtil.isPossibleNumber(number);
		if (!result.isPossible) {
			var PNV = libphonenumber.PhoneNumberUtil.ValidationResult;
			switch (phoneUtil.isPossibleNumberWithReason(number)) {
				case PNV.INVALID_COUNTRY_CODE:
					result.isPossibleFailReason = "INVALID_COUNTRY_CODE";
					break;
				case PNV.TOO_SHORT:
					result.isPossibleFailReason = "TOO_SHORT";
					break;
				case PNV.TOO_LONG:
					result.isPossibleFailReason = "TOO_LONG";
					break;
			}
		} else {
			result.isValid = phoneUtil.isValidNumber(number);
			result.regionCode = phoneUtil.getRegionCodeForNumber(number);
			var PNT = libphonenumber.PhoneNumberType;
			switch (phoneUtil.getNumberType(number)) {
				case PNT.FIXED_LINE:
					result.numberType = "FIXED_LINE"
					break;
				case PNT.MOBILE:
					result.numberType = "MOBILE"
					break;
				case PNT.FIXED_LINE_OR_MOBILE:
					result.numberType = "FIXED_LINE_OR_MOBILE"
					break;
				case PNT.TOLL_FREE:
					result.numberType = "TOLL_FREE"
					break;
				case PNT.PREMIUM_RATE:
					result.numberType = "PREMIUM_RATE"
					break;
				case PNT.SHARED_COST:
					result.numberType = "SHARED_COST"
					break;
				case PNT.VOIP:
					result.numberType = "VOIP"
					break;
				case PNT.PERSONAL_NUMBER:
					result.numberType = "PERSONAL_NUMBER"
					break;
				case PNT.PAGER:
					result.numberType = "PAGER"
					break;
				case PNT.UAN:
					result.numberType = "UAN"
					break;
				case PNT.UNKNOWN:
					result.numberType = "UNKNOWN"
					break;
			}
		}
		if (result.isPossible && result.isValid) {
			var PNF = libphonenumber.PhoneNumberFormat;
			var InternationalSplit = phoneUtil.format(number, PNF.INTERNATIONAL).split("-").join(" ").split(" ");
			result.format.countryCode = InternationalSplit[0].split("+").join("");
			result.format.areaCode = InternationalSplit[1];
			for (i = 2; i < InternationalSplit.length ; i++) {
				result.format.localNumber += InternationalSplit[i].split("-").join("");
			}
		}
	
		return result;
	},
	this.phoneValid = function (input, callback) {
		axios
			//.get(utils.apiPath("loans") + "/total-check/api/Validation/phone?number=" + input)
			.get(utils.apiPathLegacy('loans') + "/retailapi/TotalCheckApi/api/Validation/phone?number=" + input)
			.then(function(response) {
				if (response.data.result) {
					if (response.data.result.phone_status != "Active") {
						callback(false)
					}
					else {
						callback(true)
					}
				}
			})
	},
	this.isFullName = function (input) {
		return true;
	},
	this.isOver18 = function (input) {
		var latestDOB = moment(moment().format("YYYY-MM-DD")).subtract(18, 'years');
		var inputDate = moment(input, "DD/MM/YYYY");
		return (inputDate.isBefore(latestDOB));
	}
}

var utils = new Utils();
var cookies = new Cookies();
var visitor = new Visitor();
var httpRequests = new HTTPRequests();
var validation = new Validation();
jQuery(document).ready(function(){
    AOS.init();
});